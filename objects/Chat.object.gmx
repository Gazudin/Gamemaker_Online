<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// initialize
typing = false
text = ""
welcome_text = "Welcome to Gamemaker Online!"
chat_log_lines = 9
chat_input_height = 16
chat_log_height = chat_input_height * chat_log_lines
chat_log_width = 200
chat_input_width = chat_log_width

// create a queue to represent chat log
chat_log = ds_list_create()
ds_list_add(chat_log, welcome_text)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// destroy chat list

ds_list_destroy(chat_log)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Chat

// configure text
draw_set_font(fnt_chat)
draw_set_halign(fa_left)

switch(room_get_name(room)){
    
    case "rm_login":
        break
        
    case "rm_starting_zone":
        // draw chat log box
        draw_set_colour(c_green);
        draw_rectangle(0, 
            display_get_gui_height()-chat_log_height-chat_input_height,
            chat_log_width, 
            display_get_gui_height()-chat_input_height, 
            false);
        // draw chat input box
        draw_set_colour(c_black);
        draw_rectangle(0, 
            display_get_gui_height()-chat_input_height, 
            chat_input_width, 
            display_get_gui_height(), 
            false);
        
        // draw text
        draw_set_valign(fa_center)
        draw_set_color(c_aqua)
        draw_text(1, (display_get_gui_height()-chat_input_height/2), text)
        // draw
        chat_size = ds_list_size(chat_log)
        for(var i = chat_size-1; i &gt;= max(0, chat_size-chat_log_lines); i -= 1){
            var chat_str = ds_list_find_value(chat_log, i)
            show_debug_message("System in chat_str: " + string(string_pos("System:", chat_str)))
            if(string_pos("System:", chat_str) == 1){
                draw_set_color(c_yellow)
            }else{
                draw_set_color(c_aqua)
            }
            draw_text(1, (display_get_gui_height()-chat_input_height/2)-((chat_size-i)*chat_input_height),
                chat_str)
        }
        break
}

// reset text
draw_set_halign(fa_left)
draw_set_valign(fa_top)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// typing

allowed_character = keyboard_key != vk_shift &amp;&amp; keyboard_key != vk_lshift &amp;&amp; 
   keyboard_key != vk_rshift &amp;&amp; keyboard_key != vk_tab
   
if(keyboard_key == vk_enter){
    if(typing){
        if(text != ""){
            text = obj_player.username+": "+text
            var length = string_length(text)
            for(var i = 0; i &lt; length; i+=1){
                show_debug_message("Index "+string(i)+":"+string_char_at(text, i))
            }
            // "/" initiates a command
            if(string_char_at(text, string_length(obj_player.username)+3) == "/"){
                var command = string_delete(text, 1, string_pos("/", text))
                var value = string_delete(command, 1, string_pos(" ", command))
                command = string_replace(command, " "+value, "")
                if(command == "pet"){
                    if(instance_exists(obj_turtle)){
                        obj_turtle.name = value
                        text = "System: Changed pet name to "+value+"!"
                    }
                }else{
                    text = 'System: Unknown command "'+command+'"'
                }
                ds_list_add(chat_log, text)
            }else{
                ds_list_add(chat_log, text)
                // send chat packet
                var packet = buffer_create(1, buffer_grow, 1)
                buffer_write(packet, buffer_string, "chat")
                buffer_write(packet, buffer_string, text)
                scr_network_write(Network.TCP_socket, packet, "tcp")
            }
            
            // reset text
            text = ""
        }
        typing = false
    }else{
        typing = true
    }
}else{
    if(typing){
        if(keyboard_key == vk_backspace){
            text = string_copy(text, 0, string_length(text)-1)
        }else if(allowed_character){
            text += keyboard_lastchar
        }
    }
}
   
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
