<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// initialize
bgm = bgm_ragnarok;
pussytext = "y u no rek pussy?";

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// play bgm

if(!audio_is_playing(bgm)){
    audio_play_sound(bgm, 1, true)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// notify server

// If still logged in
if(room != rm_login){
  // send logout event with stats
  var packet = buffer_create(1, buffer_grow, 1);
  buffer_write(packet, buffer_string, "logout");
  buffer_write(packet, buffer_u32, obj_player_stats.level);
  buffer_write(packet, buffer_u32, obj_player_stats.expr);
  buffer_write(packet, buffer_u32, obj_player_stats.maxexpr);
  buffer_write(packet, buffer_u32, obj_player_stats.hp);
  buffer_write(packet, buffer_u32, obj_player_stats.maxhp);
  buffer_write(packet, buffer_u32, obj_player_stats.stamina);
  buffer_write(packet, buffer_u32, obj_player_stats.maxstamina);
  buffer_write(packet, buffer_u32, obj_player_stats.attack);
  scr_network_write(Network.TCP_socket, packet, "tcp");
}

// send game end packet
var packet = buffer_create(1, buffer_grow, 1)
buffer_write(packet, buffer_string, "end")
//scr_network_write(Network.UDP_socket, packet, "udp")
scr_network_write(Network.TCP_socket, packet, "tcp")

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// HUD / debug


// configure text
draw_set_font(fnt_HUD);
draw_set_halign(fa_right);
draw_set_valign(fa_top);

// draw text
scr_draw_border_text(display_get_gui_width()-10, 30, "M: Mute BGM", c_white, c_black, 1, 1.0);
scr_draw_border_text(display_get_gui_width()-10, 50, "Arrow keys: Move", c_white, c_black, 1, 1.0);

switch(room_get_name(room)){
    
    case "rm_login":
        draw_set_halign(fa_right)
        scr_draw_border_text(display_get_gui_width()-10, 10, "ESC: Exit game", c_white, c_black, 1, 1.0)
        scr_draw_border_text(display_get_gui_width()/2, 10, 
        "Server status: ", c_white, c_black, 1, 1.0);
        draw_set_halign(fa_left);
        if(Network.server_status == "online"){
            scr_draw_border_text(display_get_gui_width()/2, 10, 
            Network.server_status, c_green, c_black, 1, 1.0);
        } else {
            scr_draw_border_text(display_get_gui_width()/2, 10, 
            Network.server_status, c_red, c_black, 1, 1.0);
        }
        break;
        
    case "rm_starting_zone":
        draw_set_halign(fa_right)
        scr_draw_border_text(display_get_gui_width()-10, 10, "ESC: Logout", c_white, c_black, 1, 1.0);
        scr_draw_border_text(display_get_gui_width(), display_get_gui_height()-20, 
            pussytext, c_aqua, c_black, 1, 1.0);
        break;

}


// reset text
draw_set_halign(fa_left);
scr_draw_border_text(10, 10, "Ping: "+string(Network.ping)+"ms",
  c_white, c_black, 1, 1.0);

// pussycounter
if(instance_exists(obj_player)){
  scr_draw_border_text(10, 30, "rekt pussies: " + string(obj_player.rekt_pussies), 
    c_white, c_black, 1, 1.0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// global controls

switch(keyboard_key){
    
    // quit game
    case vk_escape:
        if(room_get_name(room) == "rm_login"){
            // send game end packet
            game_end();
        } else {
            // send logout event with stats
            var packet = buffer_create(1, buffer_grow, 1);
            buffer_write(packet, buffer_string, "logout");
            buffer_write(packet, buffer_u32, obj_player_stats.level);
            buffer_write(packet, buffer_u32, obj_player_stats.expr);
            buffer_write(packet, buffer_u32, obj_player_stats.maxexpr);
            buffer_write(packet, buffer_u32, obj_player_stats.hp);
            buffer_write(packet, buffer_u32, obj_player_stats.maxhp);
            buffer_write(packet, buffer_u32, obj_player_stats.stamina);
            buffer_write(packet, buffer_u32, obj_player_stats.maxstamina);
            buffer_write(packet, buffer_u32, obj_player_stats.attack);
            scr_network_write(Network.TCP_socket, packet, "tcp");
            with(Chat){
                instance_destroy();
            }
            with(obj_player){
                instance_destroy();
            }
            
            room_goto(rm_login);
            audio_stop_sound(bgm);
            bgm = bgm_ragnarok;
            audio_play_sound(bgm, 5, true);
        }
        break;
        
    
    // 
    case vk_enter:
        break;
    
    // mute/unmute bgm
    case ord('M'):
        // if not typing in chat
        if(instance_exists(Chat)){
            if(!Chat.typing){
                if(!audio_is_paused(bgm)){
                    audio_pause_sound(bgm);
                } else {
                    audio_resume_sound(bgm);
                }
            }
        }
        break

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
