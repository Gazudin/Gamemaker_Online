<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_down</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize the player
spd = 2;
image_speed = 0;
right_key = keyboard_check(vk_right);
up_key = keyboard_check(vk_up);
left_key = keyboard_check(vk_left);
down_key = keyboard_check(vk_down);




old_x = x;
old_y = y;
username_x_offset = 0;
username_y_offset = -sprite_height/2;
rekt_pussies = 0;


// Create turdl
pet = instance_create(x, y, obj_turtle);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// destroy pet

if(instance_exists(pet)){
    with(pet){
        instance_destroy()
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Move the player in the step event

// don't move if typing
if(!Chat.typing){
    old_x = phy_position_x;
    old_y = phy_position_y;

    // Get input
    right_key = keyboard_check(vk_right);
    up_key = keyboard_check(vk_up);
    left_key = keyboard_check(vk_left);
    down_key = keyboard_check(vk_down);

    // Move right
    if(right_key){
        phy_position_x += spd;
        sprite_index = spr_player_right;
        image_speed = .1;
    }
    // Move up
    if(up_key){
        phy_position_y -= spd;
        sprite_index = spr_player_up;
        image_speed = .1;
    }
    // Move left
    if(left_key){
        phy_position_x -= spd;
        sprite_index = spr_player_left;
        image_speed = .1;
    }
    // Move down
    if(down_key){
        phy_position_y += spd;
        sprite_index = spr_player_down;
        image_speed = .1;
    }
    
    // if moved, update position
    if(old_x != phy_position_x || old_y != phy_position_y){  
    
       /*var packet = buffer_create(1, buffer_grow, 1);
        buffer_write(packet, buffer_string, "pos");
        buffer_write(packet, buffer_string, room_get_name(room));
        buffer_write(packet, buffer_u32, x);
        buffer_write(packet, buffer_u32, y);
        pos_id += 1
        
        scr_network_write(Network.UDP_socket, packet, "udp");
        */
        
        var packet = buffer_create(1, buffer_grow, 1);
        buffer_write(packet, buffer_string, "pos");
        buffer_write(packet, buffer_u32, x);
        buffer_write(packet, buffer_u32, y);
        
        scr_network_write(Network.TCP_socket, packet, "tcp");
    } else {
      image_speed = 0;
      image_index = 0;
    }
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_wall">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Collide
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// update the room
phy_fixed_rotation = true;

var packet = buffer_create(1, buffer_grow, 1);
buffer_write(packet, buffer_string, "enter");
buffer_write(packet, buffer_u32, x);
buffer_write(packet, buffer_u32, y);

scr_network_write(Network.TCP_socket, packet, "tcp");
//scr_network_write(Network.UDP_socket, packet, "udp");

if(!instance_exists(obj_turtle)){
    instance_create(x, y, obj_turtle)
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw username
draw_sprite(spr_player_shadow, image_index, x, y);
draw_self();

// configure font
draw_set_font(fnt_user_name);
draw_set_halign(fa_center);
draw_set_valign(fa_bottom);

// draw shadow
draw_text_colour(phy_position_x+username_x_offset+1, phy_position_y+username_y_offset, username, c_black, c_black, c_black, c_black, 1.0)
draw_text_colour(phy_position_x+username_x_offset-1, phy_position_y+username_y_offset, username, c_black, c_black, c_black, c_black, 1.0)
draw_text_colour(phy_position_x+username_x_offset, phy_position_y+username_y_offset+1, username, c_black, c_black, c_black, c_black, 1.0)
draw_text_colour(phy_position_x+username_x_offset, phy_position_y+username_y_offset-1, username, c_black, c_black, c_black, c_black, 1.0)

// draw inner
draw_text_colour(phy_position_x+username_x_offset, phy_position_y+username_y_offset, username, c_white, c_white, c_white, c_white, 1.0)

// reset font
draw_set_halign(fa_left);
draw_set_valign(fa_top);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>2,12</point>
    <point>12,12</point>
    <point>12,20</point>
    <point>2,20</point>
  </PhysicsShapePoints>
</object>
