<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_down</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>obj_player_user_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize the player
event_inherited();
hspd = 0;
vspd = 0;
len= 0;
dir = 0;
state = scr_move_state;

AI_host = false;
idle = false;
old_x = x;
old_y = y;
username_x_offset = 0;
username_y_offset = -sprite_height/2;
rekt_pussies = 0;


// Create the View
instance_create(x, y, View);

// Create turdl
/*if(!instance_exists(obj_turtle)){
    pet = instance_create(x, y, obj_turtle)
}*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// destroy pet
if(instance_exists(obj_turtle)){
  with(pet){
    instance_destroy();
  }
}

if(instance_exists(obj_player_stats)){
    with(obj_player_stats){
        instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// this alarm is for the dash state
state = scr_move_state;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Move the player in the step event
depth = -y;
new_sprite = sprite[movement, face];

// When changing sprite
if(new_sprite != sprite_index){
  sprite_index = new_sprite;
  /* Send sprite packet
  var packet = buffer_create(1, buffer_grow, 1);
  buffer_write(packet, buffer_string, "sprite");
  buffer_write(packet, buffer_string, sprite_get_name(new_sprite));
  scr_network_write(Network.TCP_socket, packet, "tcp");*/
}

// Don't act if typing
if(!Chat.typing){
  script_execute(state);
} else {
  image_speed = 0;
  image_index = 0;
}

if(obj_player_stats.hp &lt;= 0){
  //show_message("You died! But Gazu the almighty revived you");
  obj_player_stats.hp = 1;
  // instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_door">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Go through the door

if(room_exists(other.new_room)){
  room_goto(other.new_room);
  x = other.new_x;
  y = other.new_y;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_health">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Collect health
with(other){
  instance_destroy();
  audio_play_sound(snd_expr, 5, false);
}

with(obj_player_stats){
  hp = min(hp+5, maxhp);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_expr">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Collect expr

var plusexpr = other.plusexpr

with(obj_player_stats){
  expr += plusexpr;
  // Level up
  if(expr &gt;= maxexpr){
    level += 1;
    expr = expr-maxexpr;
    maxexpr += 3;
    hp += 2;
    maxhp += 2;
    stamina += 2;
    maxstamina += 2;
    attack += 1;
    
    // Send stats update to server
    var packet = buffer_create(1, buffer_grow, 1);
    buffer_write(packet, buffer_string, "stats");
    buffer_write(packet, buffer_u32, level);
    buffer_write(packet, buffer_u32, expr);
    buffer_write(packet, buffer_u32, maxexpr);
    buffer_write(packet, buffer_u32, hp);
    buffer_write(packet, buffer_u32, maxhp);
    buffer_write(packet, buffer_u32, stamina);
    buffer_write(packet, buffer_u32, maxstamina);
    buffer_write(packet, buffer_u32, attack);
    scr_network_write(Network.TCP_socket, packet, "tcp");
  }
}

with(other){
  instance_destroy();
  audio_play_sound(snd_expr, 5, false);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Change back to move state
if(state == scr_attack_state){
  state = scr_move_state;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Send leave room packet

// Make sure we're not in login screen
if(room != rm_login){
  var packet = buffer_create(1, buffer_grow, 1);
  buffer_write(packet, buffer_string, "leave room");
  buffer_write(packet, buffer_string, room_get_name(room));
  
  scr_network_write(Network.TCP_socket, packet, "tcp");
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update the room: send enter room packet
event_inherited();

// make sure we're logged in when sending room data
if(room != rm_login){
  var packet = buffer_create(1, buffer_grow, 1);
  buffer_write(packet, buffer_string, "enter room");
  buffer_write(packet, buffer_string, room_get_name(room) );
  buffer_write(packet, buffer_u32, x);
  buffer_write(packet, buffer_u32, y);
  
  scr_network_write(Network.TCP_socket, packet, "tcp");
  //scr_network_write(Network.UDP_socket, packet, "udp");
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw debug
// Configure font
draw_set_font(fnt_HUD);
draw_set_halign(fa_right);
draw_set_valign(fa_bottom);

if(AI_host){
  scr_draw_border_text(display_get_gui_width(), 150, 'AI Host: True', 
    c_white, c_black, 1, 1.0);
} else {
  scr_draw_border_text(display_get_gui_width(), 150, 'AI Host: False', 
    c_white, c_black, 1, 1.0);
}

// Reset font
draw_set_halign(fa_left);
draw_set_valign(fa_top);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>5</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>2,12</point>
    <point>12,12</point>
    <point>12,20</point>
    <point>2,20</point>
  </PhysicsShapePoints>
</object>
