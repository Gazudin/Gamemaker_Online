<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initiate the connetion

// Instance variables
savedBuffer = buffer_create(1, buffer_grow, 1)
reading = 0
cutBuffer = buffer_create(1, buffer_grow, 1);
server_status = ""

// Initiate the socket
TCP_socket = network_create_socket(network_socket_tcp)
UDP_socket = network_create_socket(network_socket_udp)

ip = "95.143.172.196"
port = 61027

// configure
//network_set_config(network_config_use_non_blocking_socket, 1) // don't block on socket
network_set_config(network_config_connect_timeout, 2500);

if(network_connect_raw(TCP_socket, ip, port) &gt;= 0){
    server_status = "online"
} else {
    server_status = "offline"
}

room_goto_next()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Handle Server Packets

switch(async_load[? "type"]){

   case network_type_data:
      buffer_copy(async_load[? "buffer"], 0, async_load[? "size"], savedBuffer, buffer_tell(savedBuffer));
      buffer_seek(savedBuffer, buffer_seek_relative, async_load[? "size"] + 1);
      
      while(true){
         
         var size = buffer_peek(savedBuffer, reading, buffer_u8);
         
         if(buffer_get_size(savedBuffer) &gt;= reading + size){
         
            buffer_copy(savedBuffer, reading, size, cutBuffer, 0);
            buffer_seek(cutBuffer, 0, 1);
            
            scr_handle_packet(cutBuffer);
            
            if(buffer_get_size(savedBuffer) != reading+size){
               reading += size;
            }else {
               buffer_resize(savedBuffer, 1);
               reading = 0;
               break;
            }
         
         }else{
            break;
         }
      }
      break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// retry connection

// Instance variables
savedBuffer = buffer_create(1, buffer_grow, 1)
reading = 0
cutBuffer = buffer_create(1, buffer_grow, 1);

// Initiate the socket
TCP_socket = network_create_socket(network_socket_tcp)
UDP_socket = network_create_socket(network_socket_udp)

ip = "95.143.172.196"
port = 61027

// configure
//network_set_config(network_config_use_non_blocking_socket, 1) // don't block on socket
network_set_config(network_config_connect_timeout, 2500);

if(server_status != "online"){
    if(network_connect_raw(TCP_socket, ip, port) &gt;= 0){
        server_status = "online"
    } else {
        server_status = "offline"
    }
} else {
    show_message("Already connected to server.")
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
