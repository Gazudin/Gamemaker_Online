<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initiate the connetion
randomize() // for random_udp_port
// Instance variables
savedBuffer = buffer_create(1, buffer_grow, 1)
reading = 0
cutBuffer = buffer_create(1, buffer_grow, 1);
server_status = "offline" // assume server is offline
timer_start = get_timer()/1000 // milliseconds
timer = timer_start
ping_start = 0
ping = 0
ping_frequency = 1500// milliseconds between 2 pings
ping_sent = false
timeout = 3500 // milliseconds before connection timeout
ip = "95.143.172.196"
tcp_port = 61027
udp_port = 61954

// configure
network_set_config(network_config_use_non_blocking_socket, 1) // don't block on connection

// start sending packets
event_user(0)

room_goto_next()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Timer

timer = get_timer()/1000 - timer_start

if(timer &gt;= ping_frequency &amp;&amp; server_status == "online" &amp;&amp; ping_sent == false){
    // restart ping timer
    ping_start = get_timer()/1000
    // send new ping
    var packet = buffer_create(1, buffer_grow, 1);
    buffer_write(packet, buffer_string, "ping");
    ping_sent = true
    //scr_network_write(Network.UDP_socket, packet, "udp");
    scr_network_write(Network.TCP_socket, packet, "tcp");
    
} else if(timer &gt;= timeout){
    switch(server_status){
        
        case "online":
            server_status = "offline"
            ping = 0
            show_message("Connection timeout!")
            // destroy sockets before creating new ones
            network_destroy(UDP_socket)
            network_destroy(TCP_socket)
            
            // destroy player and go bacl to login screen
            with(obj_player){
                instance_destroy()
                room_goto(rm_login)
            }
            break
        
        case "offline":
            // try to re-connect
            event_user(0)
            break 
    }
} 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Handle Server Packets

switch(async_load[? "type"]){

    case network_type_data:
        // received data, reset timeout timer
        timer_start = get_timer()/1000

        buffer_copy(async_load[? "buffer"], 0, async_load[? "size"], savedBuffer, buffer_tell(savedBuffer));
        buffer_seek(savedBuffer, buffer_seek_relative, async_load[? "size"] + 1);
      
        while(true){
         
            var size = buffer_peek(savedBuffer, reading, buffer_u8);
         
            if(buffer_get_size(savedBuffer) &gt;= reading + size){
         
                buffer_copy(savedBuffer, reading, size, cutBuffer, 0);
                buffer_seek(cutBuffer, 0, 1);
            
                scr_handle_packet(cutBuffer);
            
                if(buffer_get_size(savedBuffer) != reading+size){
                    reading += size;
                }else {
                    buffer_resize(savedBuffer, 1);
                    reading = 0;
                    break;
                }
         
            }else{
                break;
            }
        }
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// connection

// Instance variables
savedBuffer = buffer_create(1, buffer_grow, 1)
reading = 0
cutBuffer = buffer_create(1, buffer_grow, 1);

// Initiate the socket
TCP_socket = network_create_socket(network_socket_tcp)
// generate random port range
random_udp_port = irandom_range(5000, 65000)
UDP_socket = network_create_socket_ext(network_socket_udp, random_udp_port);


if(server_status == "offline"){

    //var packet = buffer_create(1, buffer_grow, 1)
    //buffer_write(packet, buffer_string, "connect")
    //scr_network_write(UDP_socket, packet, "udp")
    
    ping_sent = false
    network_connect_raw(TCP_socket, ip, tcp_port)

    timer_start = get_timer()/1000 // reset timer
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
